x-airflow-common:
  &airflow-common
  # image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:3.0.2}
  build:
    context: .
    dockerfile: Dockerfile
  # build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: '2gv8Si5P_cVRERfeYmCE1OmoCo2MtDk23iYWYELiTjk='
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://airflow-apiserver:8080/execution/'
    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
    AIRFLOW__API__JWT_SECRET: '191442ffbd4c6251de32d80f73320e0e9e3d00a3ce5b433ec66c2b3d21fde53d'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW__OPENLINEAGE__BACKEND: "file"
    AIRFLOW__OPENLINEAGE__FILE_DIR: "/lineage"
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-apache-airflow-providers-openlineage}
#    AIRFLOW__OPENLINEAGE__BACKEND_URL: "http://marquez:5000/api/v1/lineage"
    PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/plugins:/opt/airflow/plugins
    - ./spark-jobs:/opt/spark-jobs
    - ./chroma/chroma:/chroma/chroma
    - ./lineage:/lineage
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
    spark-master:
      condition: service_started
#    marquez:
#      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - activefence-network


  redis:
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - activefence-network

  airflow-apiserver:
    <<: *airflow-common
    command: api-server
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    networks:
      - activefence-network
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully


  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
#    environment:
#      AIRFLOW__OPENLINEAGE__BACKEND_URL: "http://marquez:5000/api/v1/lineage"
    networks:
      - activefence-network
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully


  airflow-dag-processor:
    <<: *airflow-common
    command: dag-processor
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
#    environment:
#      AIRFLOW__OPENLINEAGE__BACKEND_URL: "http://marquez:5000/api/v1/lineage"
    networks:
      - activefence-network
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully


  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
#      AIRFLOW__OPENLINEAGE__BACKEND_URL: http://marquez:5000/api/v1/lineage
#      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    networks:
      - activefence-network
    depends_on:
      <<: *airflow-common-depends-on
      airflow-apiserver:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully


  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
#    environment:
#      AIRFLOW__OPENLINEAGE__BACKEND_URL: "http://marquez:5000/api/v1/lineage"
    restart: always
    networks:
      - activefence-network
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully


  airflow-init:
    image: apache/airflow:3.0.2
    build:
        context: .
        dockerfile: Dockerfile
    pull_policy: never
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
          export AIRFLOW_UID=$(id -u)
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        echo
        echo "Creating missing opt dirs if missing:"
        echo
        mkdir -v -p /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Airflow version:"
        /entrypoint airflow version
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Running airflow config list to create default config file if missing."
        echo
        /entrypoint airflow config list >/dev/null
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Change ownership of files in /opt/airflow to ${AIRFLOW_UID}:0"
        echo
        chown -R "${AIRFLOW_UID}:0" /opt/airflow/
        echo
        echo "Change ownership of files in shared volumes to ${AIRFLOW_UID}:0"
        echo
        chown -v -R "${AIRFLOW_UID}:0" /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
         # Run airflow db upgrade (migrate the DB schema)

    networks:
      - activefence-network
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"


  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow
    networks:
      - activefence-network
    depends_on:
      <<: *airflow-common-depends-on

  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    networks:
      - activefence-network
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

#  marquez:
#    image: marquezproject/marquez:latest
#    ports:
#      - "5050:5000"
#      - "3000:3000"
#    environment:
#      MARQUEZ_CONFIG: /etc/marquez/marquez.yaml
#      MARQUEZ_DB_HOST: postgres
#      MARQUEZ_DB_PORT: 5432
#      MARQUEZ_DB_USER: airflow
#      MARQUEZ_DB_PASS: airflow
#      MARQUEZ_DB_NAME: airflow
#    volumes:
#      - ./marquez.yaml:/etc/marquez/marquez.yaml:ro
#    depends_on:
#      - postgres
#    platform: linux/amd64
#    networks:
#      - activefence-network
#    restart: on-failure
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://localhost:5000/api/v1/namespaces"]
#      interval: 10s
#      timeout: 5s
#      retries: 5
  # Spark services
  spark-master:
    image: bitnami/spark:3.5.3
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=spark-master
      - SPARK_LOCAL_IP=spark-master            # <--- ADD
      - SPARK_PUBLIC_DNS=spark-master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_CONF_DIR=/opt/bitnami/spark/conf
      - SPARK_DRIVER_MEMORY=2g
      - SPARK_MASTER_MEMORY=1g
    user: root   # <-- Add this line
    volumes:
      - ./spark-jobs:/opt/spark-jobs
      - ./chroma/chroma:/chroma/chroma            # <-- mount chroma data volume here

    ports:
      - "8082:8080"
      - "7077:7077"
    networks:
      - activefence-network

  spark-worker:
    image: bitnami/spark:3.5.3
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_MEMORY=5g
    user: root   # <-- Add this line
    volumes:
      - ./spark-jobs:/opt/spark-jobs
      - ./chroma/chroma:/chroma/chroma          # <-- also mount here
    networks:
      - activefence-network

  # MinIO service
  minio:
    image: minio/minio:RELEASE.2024-05-10T01-41-38Z
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - minio-data:/data
    command: ["server", "/data", "--console-address", ":9001"]
    networks:
      - activefence-network

  minio-init:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: ["/bin/sh", "-c"]
    command: ["/usr/local/bin/minio-init.sh"]
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    volumes:
      - ./minio-init.sh:/usr/local/bin/minio-init.sh:ro
    networks:
      - activefence-network

  # Chroma service
  chroma:
    image: chromadb/chroma:0.5.5
    ports:
      - "8000:8000"
    volumes:
      - ./chroma/chroma:/chroma/chroma
    environment:
      - IS_PERSISTENT=TRUE
      - ANONYMIZED_TELEMETRY=FALSE
      - CHROMADB_PERSIST_DIRECTORY=/chroma/chroma
    networks:
      - activefence-network

  # FastAPI service
  fastapi:
    user: root
    image: tiangolo/uvicorn-gunicorn-fastapi:python3.11
    environment:
      - CHROMA_TELEMETRY_OPT_OUT=true
    volumes:
      - ./fastapi:/app
      - chroma-data:/chroma/chroma
    ports:
      - "8005:80"
    depends_on:
      - ollama
      - chroma
      - minio

    networks:
      - activefence-network
    command: bash -c "pip install chromadb==0.5.5 requests==2.31.0 pydantic==2.7.0 && uvicorn main:app --host 0.0.0.0 --port 80"

  # Ollama service
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama-data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    restart: unless-stopped
    entrypoint: ["/bin/bash", "-c", "ollama serve & sleep 5 && ollama pull nomic-embed-text && ollama pull smollm2:135m && wait"]
    networks:
      - activefence-network

volumes:
  postgres-db-volume:
  minio-data:
  chroma-data:
  ollama-data:
  spark-jobs:


networks:
  activefence-network:
    driver: bridge